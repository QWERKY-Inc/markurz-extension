name: Artifact Build

on:
  workflow_dispatch:

jobs:
  build:
#    uncomment if you have to have builds running only on commits linked to tickets
#    if: startsWith(github.event.commits[0].message, 'MKZ-')
    name: Build Web Extension and store artifact

    env:
      REACT_APP_LOGIN_URL: ${{ vars.REACT_APP_LOGIN_URL }}
      REACT_APP_COOKIE_DOMAIN: ${{ vars.REACT_APP_COOKIE_DOMAIN }}
      REACT_APP_COOKIE_NAME: ${{ vars.REACT_APP_COOKIE_NAME }}
      REACT_APP_BACKEND_URL: ${{ vars.REACT_APP_BACKEND_URL }}
      GQL_SCHEMA_TOKEN: ${{ secrets.GQL_SCHEMA_TOKEN }}
      REACT_APP_NEXTAUTH_SECRET: ${{ secrets.REACT_APP_NEXTAUTH_SECRET }}

# Uncomment to run the build on separate machines
#    strategy:
#      fail-fast: false
#      matrix:
#        platform: [ macos-latest, ubuntu-latest ]
#    runs-on: ${{ matrix.platform }}
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build
        run: |
          yarn install --immutable --immutable-cache --check-cache
          yarn build
      - name: Setup XCode (macos only)
#        Uncomment to only run on macos
#        if: matrix.platform == 'macos-latest'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Build with XCode (macos only)
        #        Uncomment to only run on macos
        #        if: matrix.platform == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # build extension
          cat /Applications/Safari.app/Contents/version.plist
          xcrun safari-web-extension-converter ./build --no-open --force --bundle-identifier com.qwerky.markurz
          xcodebuild -project ./Markurz/Markurz.xcodeproj -scheme "Markurz (macOS)" -destination "generic/platform=macOS" build BUILD_DIR=./buildmacos

      - name: Zip Folder Chrome Extension
        run: zip -r build.zip build
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: build.zip
      - name: Zip Folder Safari Extension
        run: zip -r buildmacos.zip Markurz/buildmacos/Debug/Markurz.app
      - uses: actions/upload-artifact@v3
        with:
          name: buildmacos
          path: buildmacos.zip
